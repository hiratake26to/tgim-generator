language: generic
os: linux
dist: trusty

branches:
  only:
    - master

matrix:
  include:
    - compiler: gcc
      env:
        - CXX=g++-4.8

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9']
      env:
        - CXX=g++-4.9

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5']
      env:
        - CXX=g++-5

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6']
      env:
        - CXX=g++-6

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env:
        - CXX=g++-7

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env:
        - CXX=g++-7
        - CXXSTD=-std=c++17

    - dist: precise
      compiler: clang
      env:
        - CXX=clang++

    - compiler: clang
      addons:
        apt:
          packages: ['clang-3.5']
      env:
        - CXX=clang++-3.5

    - compiler: clang
      addons:
        apt:
          packages: ['clang-3.6']
      env:
        - CXX=clang++-3.6

    - dist: precise
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
          packages: ['clang-3.7']
      env:
        - CXX=clang++-3.7

    - compiler: clang
      addons:
        apt:
          packages: ['clang-3.8']
      env:
        - CXX=clang++-3.8

    - compiler: clang
      addons:
        apt:
          #sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-3.9']
          packages: ['clang-3.9']
      env:
        - CXX=clang++-3.9

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
          packages: ['clang-4.0']
      env:
        - CXX=clang++-4.0

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0']
      env:
        - CXX=clang++-5.0

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0']
      env:
        - CXX=clang++-5.0
        - CXXSTD=-std=c++17

    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env:
        - CXX=clang++

    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env:
        - CXX=clang++

    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env:
        - CXX=clang++

    - os: osx
      osx_image: xcode9
      compiler: clang
      env:
        - CXX=clang++

    - language: android
      jdk: openjdk7
      android:
        components:
          - tools
          - build-tools-23.0.3
          - extra-android-support
          - extra-android-m2repository
          - android-22
          - sys-img-armeabi-v7a-android-22
          - cmake
        licenses:
          - '.+'
      before_script:
        - export TERM=dumb
        - curl -L http://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip -O
        - unzip -q android-ndk-r10e-linux-x86_64.zip
        - export ANDROID_NDK_HOME=`pwd`/android-ndk-r10e
        - export LOCAL_ANDROID_NDK_HOME="$ANDROID_NDK_HOME"
        - export LOCAL_ANDROID_NDK_HOST_PLATFORM="linux-x86_64"
        - export PATH=$PATH:${ANDROID_NDK_HOME}
        - export CMAKE_VERSION=3.6.2
        - curl -L https://cmake.org/files/v3.6/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz -O
        - tar xzf cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz
        - export PATH=cmake-${CMAKE_VERSION}-Linux-x86_64/bin:$PATH
        - export _NO_CHECK_SIGNATURE=true
        - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a
        - emulator -avd test -no-audio -no-window &
        - android-wait-for-emulator || android-wait-for-emulator
      script:
        - cmake -DANDROID_NDK="$ANDROID_NDK_HOME" -DANDROID_ABI=armeabi-v7a -DPEGTL_BUILD_EXAMPLES=OFF
        - make -j2
        - make test

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env:
        - CXX=g++-7
        - CXXFLAGS="-O0 --coverage"
      before_script:
        - pip install --user cpp-coveralls
      script:
        - make -j3 check
        - coveralls --gcov gcov-7 --gcov-options '\-lp' --exclude src

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env:
        - CXX=g++-7
        - CPPFLAGS=-fsanitize=undefined

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env:
        - CXX=g++-7
        - CPPFLAGS="-fsanitize=address -fuse-ld=gold"

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0']
      env:
        - CXX=clang++-5.0
        - CPPFLAGS=-fsanitize=undefined

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0']
      env:
        - CXX=clang++-5.0
        - CPPFLAGS=-fsanitize=address

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'valgrind']
      env:
        - CXX=g++-7
        - SPECIAL=valgrind
      script:
        - make -j3 valgrind

    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'cppcheck']
      env:
        - CXX=g++-7
        - SPECIAL=cppcheck
      script:
        - make -j3 cppcheck

    - compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['clang-5.0', 'clang-tidy-5.0']
      env:
        - CXX=clang++-5.0
        - CLANG_TIDY=clang-tidy-5.0
      script:
        - make -j3 clang-tidy

script:
  - $CXX --version
  - make -j3
